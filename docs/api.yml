openapi: 3.0.3
info:
  title: Library API
  version: 1.0.0
  description: STD21089
servers:
  - url: https://library.com
tags:
  - name: Books
  - name: Authors
paths:
  /books:
    get:
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      tags:
        - Books
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - in: query
          name: releaseDateStart
          description: Filter return books by the start of release date interval
          required: false
          schema:
            type: string
            format: date
        - in: query
          name: releaseDateEnd
          description: Filter return books by the end of release date interval
          required: false
          schema:
            type: string
            format: date
        - in: query
          name: page
          description: The page number for pagination
          required: false
          schema:
            type: integer
            default: 1
        - in: query
          name: pageSize
          description: The number of items per page for pagination
          required: false
          schema:
            type: integer
            default: 50
      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    put:
      summary: Create or update a list of books
      operationId: crupdateBooks
      tags:
        - Books
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CrupdateBook'
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /books/{bookId}:
    get:
      summary: Get a specific book
      description: Get a specific book by its ID
      operationId: getBookById
      tags:
        - Books
      parameters:
        - in: path
          name: bookId
          description: ID of the book to return
          required: true
          schema:
            type: string
      responses:
        200:
          description: The requested book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
  /authors:
    get:
      summary: Get all authors
      description: Get all authors or filter by name
      operationId: getAuthors
      tags:
        - Authors
      parameters:
        - in: query
          name: authorName
          description: Filter return authors by name
          required: false
          schema:
            type: string
        - in: query
          name: page
          description: The page number for pagination
          required: false
          schema:
            type: integer
            default: 1
        - in: query
          name: pageSize
          description: The number of items per page for pagination
          required: false
          schema:
            type: integer
            default: 50
      responses:
        200:
          description: The list of filtered authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
    put:
      summary: Create or update an author
      operationId: crupdateAuthor
      tags:
        - Authors
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
      responses:
        200:
          description: The created or updated author
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
    delete:
      summary: Delete an author
      operationId: deleteAuthor
      tags:
        - Authors
      parameters:
        - in: query
          name: authorId
          description: ID of the author to be deleted
          required: true
          schema:
            type: string
      responses:
        200:
          description: The author has been successfully deleted
        404:
          description: The author with the specified ID was not found
        500:
          description: An internal server error occurred
  /books/{bookId}/authors/{authorId}:
    put:
      summary: Update Book Authors
      operationId: updateBookAuthors
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: string
        - name: authorId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateBookAuthor'
      responses:
        200:
          description: The authors of the book have been successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'

components:
  schemas:
    Sex:
      type: string
      enum:
        - M
        - F
    Author:
      type: object
      allOf:
        - $ref: '#components/schemas/CrupdateBook'
      properties:
        id:
          type: string
        name:
          type: string
        sex:
          $ref: '#/components/schemas/Sex'
    Book:
      type: object
      allOf:
        - $ref: '#/components/schemas/CrupdateBook'
      properties:
        author:
          $ref: '#/components/schemas/Author'
    CrupdateBook:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
    UpdateBookAuthor:
      type: object
      properties:
        bookId:
          type: string
        authorId:
          type: string

#2.b.i. UpdateBookAuthor sert de transfert de données dans le but de mettre à jour l'association entre un livre et un auteur.
#2.b.ii.  UpdateBookAuthor devrait avoir les propriétés de CrupdateBook et de Author dans le cas de: intégrité et validation des données, mises à jour partielles.
#3.a. Les paginations sont nécessaires parce que: les Performances sont améliorées, il y a l'évolutivité et l'expérience utilisateur est améliorée.
#4.a. On peut gérer la pagination à travers les entêtes de la requête parce que: c'est claire et simple, Les paramètres de requête peuvent être facilement testés et 
# manipulés directement dans l'URL et Les paramètres de requête sont pris en charge par la plupart des bibliothèques client HTTP et sont facilement intégrés dans les applications frontales.
#4.b. on ne doit pas gérer la pagination  à travers les entêtes de la requête parce que pagination est généralement gérée via des paramètres de requête dans les API RESTful,
# Les paramètres de requête assurent la transparence et la lisibilité de l'URL et l'utilisation d'en-têtes de requête peut rendre la compréhension des paramètres de pagination moins visible et moins intuitive.