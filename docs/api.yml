openapi: 3.0.3
info:
  title: Library API
  version: 1.9.0
  description: STD21089
servers:
  - url: https://library.com
tags:
  - name: Books
  - name: Authors
  - name: Topics
paths:
  /books:
    get:
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      tags:
        - Books
      parameters:
        - $ref: '#/components/parameters/QueryPagination'
      responses:
        200:
          $ref: '#/components/responses/200'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
    put:
      summary: Create or update a list of books
      operationId: crupdateBooks
      tags:
        - Books
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CrupdateBook'
      responses:
        200:
          $ref: '#/components/responses/200'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
        
  /books/{bookId}:
    get:
      summary: Get a specific book
      description: Get a specific book by its ID
      operationId: getBookById
      tags:
        - Books
      parameters:
        - in: path
          name: bookId
          description: ID of the book to return
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/200'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /authors:
    get:
      summary: Get all authors
      description: Get all authors or filter by name
      operationId: getAuthors
      tags:
        - Authors
      parameters:
        - $ref: '#/components/parameters/QueryPagination'
      responses:
        200:
          $ref: '#/components/responses/200'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /authorsTopics:
    get:
      summary: Get list of AuthorTopics
      description: Return a list of AuthorTopics
      operationId: getAuthorsTopics
      tags:
        - Authors
      parameters:
        - in: query
          name: authorId
          description: ID of the author (optional)
          required: false
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/200'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /author/page/{page}/size/{size}:
    get:
      summary: get page size
      tags:
        - Authors
      operationId: getPageSize
      parameters:
          - name: page
            in: path
            required: true
            schema:
              type: string
      responses:
        200:
          $ref: '#/components/responses/200'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /authors/import:
    post:
      summary: Import authors
      operationId: importAuthors
      tags:
        - Authors
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportAuthor'
      responses:
        200:
          $ref: '#/components/responses/200'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
    put:
      summary: Create or update an author
      operationId: crupdateAuthor
      tags:
        - Authors
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
      responses:
        200:
          $ref: '#/components/responses/200'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
    delete:
      summary: Delete an author
      operationId: deleteAuthor
      tags:
        - Authors
      parameters:
        - in: query
          name: authorId
          description: ID of the author to be deleted
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/200'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /books/{bookId}/authors/{authorId}:
    put:
      tags:
        - Books
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: string
        - name: authorId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/200'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /topics:
    get:
      summary: Get all topics
      description: Get all available topics
      tags:
        - Topics
      operationId: getTopic
      parameters:
        - $ref: '#/components/parameters/QueryPagination'
      responses:
        200:
          $ref: '#/components/responses/200'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
    put:
      summary: Create or update a topic
      operationId: crupdateTopic
      tags:
        - Topics
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Topic'
      responses:
        200:
          $ref: '#/components/responses/200'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
    delete:
      summary: Delete a topic
      operationId: deleteTopic
      tags:
        - Topics
      parameters:
        - in: query
          name: topicId
          description: ID of the topic to be deleted
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/200'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /books/{bookId}/topics/{topicId}:
    put:
      tags:
        - Books
      parameters:
        - in: path
          name: bookId
          required: true
          schema:
            type: string
        - in: path
          name: topicId
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/200'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /books/topics:
    put:
      tags:
        - Books
      summary: Update a list of book's topics
      operationId: updateBooksTopics
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Book'
      responses:
        200:
          $ref: '#/components/responses/200'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /books/import:
    post:
      summary: Import books
      operationId: importBooks
      tags:
        - Books
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Book'
      responses:
        200:
          $ref: '#/components/responses/200'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
components:
  schemas:
    Sex:
      type: string
      enum:
        - M
        - F
    Author:
      type: object
      allOf:
        - $ref: '#/components/schemas/CrupdateBook'
      properties:
        id:
          type: string
        name:
          type: string
        sex:
          $ref: '#/components/schemas/Sex'
    Book:
      type: object
      allOf:
        - $ref: '#/components/schemas/CrupdateBook'
      properties:
        author:
          $ref: '#/components/schemas/Author'
        topic:
          $ref: '#/components/schemas/Topic'
    CrupdateBook:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        pageNumbers:
          type: integer
        releaseDate:
          type: string
          format: date
    Topic:
      properties:
        topicName:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
    AuthorTopic:
      type: object
      properties:
        authorId:
          type: string
        authorName:
          type: string
        authorSex:
          $ref: '#/components/schemas/Sex'
        topics:
          type: array
          items:
            $ref: '#/components/schemas/Topic'
    ImportAuthor:
      oneOf:
        - type: array
          items:
            type: object
            properties:
              authorName:
                type: string
              sex:
                $ref: '#/components/schemas/Sex'
        - type: string
          format: binary
          description: Excel file for author import
      discriminator:
          propertyName: importType
          mapping:
            excel: '#/components/schemas/ImportAuthorExcel'
            json: '#/components/schemas/ImportAuthorJSON'
    ImportAuthorExcel:
      type: string
      format: binary
      description: Excel file for author import

    ImportAuthorJSON:
      type: array
      items:
        type: object
        properties:
          authorName:
            type: string
          sex:
            $ref: '#/components/schemas/Sex'
    ImportBook:
      oneOf:
        - type: array
          items:
            type: object
            properties:
              bookName:
                type: string
              author:
                $ref: '#/components/schemas/Author'
              pageNumbers:
                type: integer
              topic:
                $ref: '#/components/schemas/Topic'
              releaseDate:
                type: string
                format: date
              idAuthor:
                type: string
        - type: string
          format: binary
          description: Excel file for book import
      discriminator:
        propertyName: importType
        mapping:
          excel: '#/components/schemas/ImportBookExcel'
          json: '#/components/schemas/ImportBookJSON'
    ImportBookExcel:
      type: string
      format: binary
      description: Excel file for book import
    ImportBookJSON:
      type: array
      items:
        type: object
        properties:
          bookName:
            type: string
          author:
            $ref: '#/components/schemas/Author'
          pageNumbers:
            type: integer
          topic:
            $ref: '#/components/schemas/Topic'
          releaseDate:
            type: string
            format: date
          idAuthor:
            type: string
    ApiResponse:
      type: object
      properties:
        status:
          type: object
          properties:
            code:
              type: integer
              format: int32
            message:
              type: string
        body:
          type: object
    BadRequestException:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
      example:
        type: BadRequestException
        message: Bad request
    NotAuthorizedException:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
      example:
        type: NotAuthorizedException
        message: Not authorized
    InternalServerException:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
      example:
        type: InternalServerException
        message: Unexpected error
  responses:
    '200':
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
    '400':
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequestException'

    '403':
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotAuthorizedException'

    '500':
      description: Internal server error occurred
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InternalServerException'

  parameters:
    QueryPage:
      in: query
      name: page
      description: Page Number for pagination (default 1)
      schema:
        type: integer
        default: 1
      required: false
    QueryPageSize:
      in: query
      name: pageSize
      description: Page size for pagination default 50
      schema:
        type: integer
        default: 50
      required: false
    PathPage:
      in: path
      name: page
      description: Page Number for pagination (default 1)
      schema:
        type: integer
        default: 1
      required: true
    PathPageSize:
      in: path
      name: pageSize
      description: Page size for pagination default 50
      schema:
        type: integer
        default: 50
      required: true
    QueryPagination:
      in: query
      name: queryPagination
      schema:
        allOf: 
          - $ref: '#/components/parameters/QueryPage'
    PathPagination:
      in: path
      name: pathPagination
      required: true
      schema:
        allOf: 
          - $ref: '#/components/parameters/PathPage'
          - $ref: '#/components/parameters/PathPageSize'
